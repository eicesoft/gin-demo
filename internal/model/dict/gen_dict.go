///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package sys_dicts

import (
	"fmt"

	"eicesoft/web-demo/internal/model"
	"eicesoft/web-demo/pkg/core"
	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *Dict {
	return new(Dict)
}

func NewQueryBuilder() *sysDictsQueryBuilder {
	return new(sysDictsQueryBuilder)
}

func (t *Dict) Assign(src interface{}) {
	core.StructCopy(t, src)
}

func (t *Dict) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

func (t *Dict) Delete(db *gorm.DB) (err error) {
	if err = db.Delete(t).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (t *Dict) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	if err = db.Model(&Dict{}).Where("id = ?", t.Id).Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

type sysDictsQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *sysDictsQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	if err = qb.buildUpdateQuery(db).Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *sysDictsQueryBuilder) buildUpdateQuery(db *gorm.DB) *gorm.DB {
	ret := db.Model(&Dict{})
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	return ret
}

func (qb *sysDictsQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *sysDictsQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&Dict{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *sysDictsQueryBuilder) First(db *gorm.DB) (*Dict, error) {
	ret := &Dict{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *sysDictsQueryBuilder) QueryOne(db *gorm.DB) (*Dict, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *sysDictsQueryBuilder) QueryAll(db *gorm.DB) ([]*Dict, error) {
	var ret []*Dict
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *sysDictsQueryBuilder) Limit(limit int) *sysDictsQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *sysDictsQueryBuilder) Offset(offset int) *sysDictsQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *sysDictsQueryBuilder) WhereId(p model.Predicate, value int32) *sysDictsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *sysDictsQueryBuilder) WhereIdIn(value []int32) *sysDictsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *sysDictsQueryBuilder) WhereIdNotIn(value []int32) *sysDictsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sysDictsQueryBuilder) OrderById(asc bool) *sysDictsQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *sysDictsQueryBuilder) WhereTitle(p model.Predicate, value string) *sysDictsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "title", p),
		value,
	})
	return qb
}

func (qb *sysDictsQueryBuilder) WhereTitleIn(value []string) *sysDictsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "title", "IN"),
		value,
	})
	return qb
}

func (qb *sysDictsQueryBuilder) WhereTitleNotIn(value []string) *sysDictsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "title", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sysDictsQueryBuilder) OrderByTitle(asc bool) *sysDictsQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "title "+order)
	return qb
}

func (qb *sysDictsQueryBuilder) WhereDictKey(p model.Predicate, value string) *sysDictsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "dict_key", p),
		value,
	})
	return qb
}

func (qb *sysDictsQueryBuilder) WhereDictKeyIn(value []string) *sysDictsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "dict_key", "IN"),
		value,
	})
	return qb
}

func (qb *sysDictsQueryBuilder) WhereDictKeyNotIn(value []string) *sysDictsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "dict_key", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sysDictsQueryBuilder) OrderByDictKey(asc bool) *sysDictsQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "dict_key "+order)
	return qb
}

func (qb *sysDictsQueryBuilder) WhereDictType(p model.Predicate, value int32) *sysDictsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "dict_type", p),
		value,
	})
	return qb
}

func (qb *sysDictsQueryBuilder) WhereDictTypeIn(value []int32) *sysDictsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "dict_type", "IN"),
		value,
	})
	return qb
}

func (qb *sysDictsQueryBuilder) WhereDictTypeNotIn(value []int32) *sysDictsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "dict_type", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sysDictsQueryBuilder) OrderByDictType(asc bool) *sysDictsQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "dict_type "+order)
	return qb
}

func (qb *sysDictsQueryBuilder) WhereModule(p model.Predicate, value string) *sysDictsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "module", p),
		value,
	})
	return qb
}

func (qb *sysDictsQueryBuilder) WhereModuleIn(value []string) *sysDictsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "module", "IN"),
		value,
	})
	return qb
}

func (qb *sysDictsQueryBuilder) WhereModuleNotIn(value []string) *sysDictsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "module", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sysDictsQueryBuilder) OrderByModule(asc bool) *sysDictsQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "module "+order)
	return qb
}

func (qb *sysDictsQueryBuilder) WhereIsDelete(p model.Predicate, value int32) *sysDictsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_delete", p),
		value,
	})
	return qb
}

func (qb *sysDictsQueryBuilder) WhereIsDeleteIn(value []int32) *sysDictsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_delete", "IN"),
		value,
	})
	return qb
}

func (qb *sysDictsQueryBuilder) WhereIsDeleteNotIn(value []int32) *sysDictsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_delete", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sysDictsQueryBuilder) OrderByIsDelete(asc bool) *sysDictsQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "is_delete "+order)
	return qb
}

func (qb *sysDictsQueryBuilder) WhereRemark(p model.Predicate, value string) *sysDictsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "remark", p),
		value,
	})
	return qb
}

func (qb *sysDictsQueryBuilder) WhereRemarkIn(value []string) *sysDictsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "remark", "IN"),
		value,
	})
	return qb
}

func (qb *sysDictsQueryBuilder) WhereRemarkNotIn(value []string) *sysDictsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "remark", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sysDictsQueryBuilder) OrderByRemark(asc bool) *sysDictsQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "remark "+order)
	return qb
}

func (qb *sysDictsQueryBuilder) WhereCreatedAt(p model.Predicate, value int32) *sysDictsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *sysDictsQueryBuilder) WhereCreatedAtIn(value []int32) *sysDictsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *sysDictsQueryBuilder) WhereCreatedAtNotIn(value []int32) *sysDictsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sysDictsQueryBuilder) OrderByCreatedAt(asc bool) *sysDictsQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_at "+order)
	return qb
}

func (qb *sysDictsQueryBuilder) WhereUpdatedAt(p model.Predicate, value int32) *sysDictsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *sysDictsQueryBuilder) WhereUpdatedAtIn(value []int32) *sysDictsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *sysDictsQueryBuilder) WhereUpdatedAtNotIn(value []int32) *sysDictsQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *sysDictsQueryBuilder) OrderByUpdatedAt(asc bool) *sysDictsQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_at "+order)
	return qb
}
